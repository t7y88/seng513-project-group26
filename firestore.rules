rules_version = '2';

service cloud.firestore {


  /* =====================
   * AUTO GENERATED BY FIREBASE
   * =====================
  
  match /databases/{database}/documents {

    // This rule allows anyone with your Firestore database reference to view, edit,
    // and delete all data in your Firestore database. It is useful for getting
    // started, but it is configured to expire after 30 days because it
    // leaves your app open to attackers. At that time, all client
    // requests to your Firestore database will be denied.
    //
    // Make sure to write security rules for your app before that time, or else
    // all client requests to your Firestore database will be denied until you Update
    // your rules
    match /{document=**} {
      allow read, write: if request.time < timestamp.date(2025, 5, 17);
    }
  }

    /*
     * =====================
     * USERS COLLECTION
     * =====================
     *
     * Each user has a document located at /users/{userId}.
     * The document ID must match their Firebase Authentication UID.
     * 
     * Only the authenticated user can read or write their own user document.
     */
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    /*
     * =============================
     * COMPLETED HIKES COLLECTION
     * =============================
     *
     * Each document in /completedHikes/ is keyed using a composite ID:
     * {userId}_{hikeId}_{dateCompleted}
     *
     * Only the user who created the entry (matched by prefix) may read or write.
     * This assumes the document ID starts with their UID followed by an underscore.
     */
    match /completedHikes/{docId} {
  allow read, write: if request.auth != null &&
                     docId.matches('^' + request.auth.uid + '_.*');
  }


    /*
     * =====================
     * REVIEWS COLLECTION
     * =====================
     *
     * Each document in /reviews/ contains a userâ€™s feedback on a hike.
     * 
     * - Publicly readable by all users.
     * - Writable only by the user who authored the review.
     *   The review must include a `userId` field that matches request.auth.uid.
     *
     * NOTE: This does NOT allow users to edit reviews made by others.
     */
    match /reviews/{reviewId} {
      allow read: if true;
      allow write: if request.auth != null &&
                   request.resource.data.userId == request.auth.uid;
    }

    /*
     * =====================
     * HIKES COLLECTION
     * =====================
     *
     * This contains shared hike metadata (title, distance, difficulty, etc.).
     * 
     * - Readable by anyone
     * - Not writable from the client (admin-only or preloaded server data)
     */
    match /hikes/{hikeId} {
      allow read: if true;
      allow write: if false;
    }

    /*
     * =====================
     * DEFAULT RULE (DENY)
     * =====================
     *
     * Any other document path not explicitly defined above
     * will fall through to this default catch-all rule.
     * 
     * This prevents accidental exposure of collections like:
     * - adminLogs
     * - serverCache
     * - or any future collections we haven't secured
     */
    match /{document=**} {
      allow read, write: if false;
    }
  
}